#!/usr/bin/env bash
# $HOME/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if $HOME/.bash_profile or $HOME/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# platform
if [ -z $PLATFORM ]; then
  platformName=$(uname)
  export PLATFORM=${platformName:0:6}
  if [ $PLATFORM = 'CYGWIN' ]; then
    export PLATFORM='Cygwin'
  fi
  unset platformName
fi

# current shell
current_shell() {
  ps -p $$ -ocomm=
}

command_exists() {
  command -v "$1" 2>/dev/null
}

directory_already_in_path() {
  paths=($(sed 's/:/\n/g' <<< "$PATH"))
  for i in $paths; do
    [ "$1" = "$i" ] && return 0
  done
  return 1
}

prepend_path_if_exists() {
  if [ -d "$1" ] && ! directory_already_in_path "$1" ; then
    export PATH="$1":$PATH
  fi
}

append_path_if_exists() {
  if [ -d "$1" ] && ! directory_already_in_path "$1" ; then
    export PATH=$PATH:"$1"
  fi
}

prepend_pwd_to_path() {
  prepend_path_if_exists $(pwd)
}

append_pwd_to_path() {
  append_path_if_exists $(pwd)
}

set_proxy() {
  export http_proxy="$1"
  export https_proxy="$1"
}

set_npm_proxy() {
  export npm_config_proxy="$1"
  export npm_config_https_proxy="$1"
}

explain() {
  if [ "$#" -eq 0 ]; then
    while read -p "Command: " cmd; do
      curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
    done
    echo "Bye!"
  elif [ "$#" -eq 1 ]; then
    curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
  else
    echo "Usage"
    echo "explain                   interactive mode."
    echo "explain 'cmd -o | ...'    one quoted command to explain it."
  fi
}

export EDITOR=vim
export PROJECTS=$HOME/projects
export DOTFILES_ROOT="$HOME/.dotfiles"

# Load proxy setting firstly.
[ -f ~/.proxyrc ] && source ~/.proxyrc

#Add ssh key for sync playbook repos.
if [ -d "$HOME/resource/backup-keys" ] ; then
  ssh-add "$HOME/resource/backup-keys/id_rsa" > /dev/null 2>&1
fi

setup_paths() {
  # set PATH so it includes user's private bin if it exists
  prepend_path_if_exists "$HOME/bin"

  # Add dotfiles scripts path
  prepend_path_if_exists "$DOTFILES_ROOT/bin"

  # Path for homebrew sbin
  append_path_if_exists "/usr/local/sbin"

  # Scripts in dropbox
  export DROPBOX_PATH="$HOME/cloud/Dropbox"
  prepend_path_if_exists "$DROPBOX_PATH/bin"

  # Scripts in OneDrive
  export ONEDRIVE_PATH="$HOME/cloud/OneDrive"
  prepend_path_if_exists "$ONEDRIVE_PATH/bin"

  # Go path
  append_path_if_exists "$HOME/go/bin"

  # Add depot_tools
  local DEPOT_TOOLS_HOME=$HOME/bin/depot_tools
  if [ $PLATFORM = 'Cygwin' ]; then
    append_path_if_exists "$DEPOT_TOOLS_HOME"
  else
    prepend_path_if_exists "$DEPOT_TOOLS_HOME"
  fi

  # Android SDK setup
  if [ $PLATFORM = 'Darwin' ]; then
    export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
    export ANDROID_NDK_ROOT=$HOME/Library/Android/sdk/ndk/current
  elif [ $PLATFORM = 'Linux' ]; then
    export ANDROID_SDK_ROOT=$HOME/Android/Sdk
    export ANDROID_NDK_ROOT=$HOME/Android/Sdk/ndk/current
  fi
  if [ -d "$ANDROID_SDK_ROOT" ]; then
    append_path_if_exists "$ANDROID_SDK_ROOT/tools"
    append_path_if_exists "$ANDROID_SDK_ROOT/tools/bin"
    append_path_if_exists "$ANDROID_SDK_ROOT/platform-tools"
  else
    unset ANDROID_SDK_ROOT
  fi
  if [ -d "$ANDROID_NDK_ROOT" ]; then
    append_path_if_exists "$ANDROID_NDK_ROOT"
  else
    unset ANDROID_NDK_ROOT
  fi

  # yarn path
  if [ $(command_exists yarn) ]; then
    export PATH=$PATH:"$(yarn global bin)"
  fi

  # rustup path
  # Use Tsinghua mirror site tuna.
  export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
  prepend_path_if_exists "$HOME/.cargo/bin"

  # flutter path
  append_path_if_exists "$PROJECTS/oryx/flutter/bin"
  # flutter settings for China
  #export PUB_HOSTED_URL=https://pub.flutter-io.cn
  #export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn

  # emscripten settings
  local EMSCRIPTEN_SDK_ROOT="$HOME/bin/emsdk"
  if [ -d $EMSCRIPTEN_SDK_ROOT ]; then
    source $EMSCRIPTEN_SDK_ROOT/emsdk_env.sh
  fi

  # wasmtime path
  export WASMTIME_HOME="$HOME/.wasmtime"
  prepend_path_if_exists "$WASMTIME_HOME/bin"

  # Wasmer
  export WASMER_DIR="$HOME/.wasmer"
}

setup_paths

[ -s "$WASMER_DIR/wasmer.sh" ] && source "$WASMER_DIR/wasmer.sh"

# Setup LC_ALL explicitly
export LC_ALL=en_US.UTF-8

alias npm-exec='PATH=$(npm bin):$PATH'

# A quick calculator written by awk.
# http://lifehacker.com/5396183/create-an-awesome-command-line-calculator
calc() { awk "BEGIN{ print $*  }" ; }

[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh
[ -f $HOME/.rvm/bin ] && export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
# This scrip is going to be load at the end of profile, give user chance to
# override the existing settings.
[ -f ~/.localrc ] && source ~/.localrc

[[ -s "$HOME/.mboxrc" ]] && source "$HOME/.mboxrc"

