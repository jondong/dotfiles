#!/usr/bin/env bash
# $HOME/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if $HOME/.bash_profile or $HOME/.bash_login
# exists.
# see /usr/share/doc/bash/examples/startup-files for examples.
# the files are located in the bash-doc package.

# the default umask is set in /etc/profile; for setting the umask
# for ssh logins, install and configure the libpam-umask package.
#umask 022

# platform
setup_platform() {
	# 如果 PLATFORM 已经设置，则跳过
	[[ -n "${PLATFORM:-}" ]] && return

	# 获取平台名称并规范化
	local platform_name
	platform_name="$(uname)"
	case "${platform_name}" in
		CYGWIN*)  export PLATFORM="Cygwin" ;;
		Darwin*)  export PLATFORM="Darwin" ;;
		Linux*)   export PLATFORM="Linux"  ;;
		*)        export PLATFORM="${platform_name:0:6}" ;;
	esac
}

setup_platform

# current shell
current_shell() {
	ps -p "$$" -ocomm=
}

# 检查命令是否存在
command_exists() {
	command -v "$1" >/dev/null 2>&1
}

# 检查目录是否已在 PATH 中
directory_already_in_path() {
	local dir="${1}"
	[[ ":${PATH}:" == *":${dir}:"* ]]
}

# PATH 管理函数
_modify_path() {
	local dir="${1}"
	local position="${2:-append}"  # 默认为追加

	# 验证目录
	[[ ! -d "${dir}" ]] && return 1
	directory_already_in_path "${dir}" && return 0

	# 根据位置添加路径
	if [[ "${position}" == "prepend" ]]; then
		export PATH="${dir}:${PATH}"
	else
		export PATH="${PATH}:${dir}"
	fi
}

# 在 PATH 前添加目录
prepend_path_if_exists() {
	_modify_path "${1}" "prepend"
}

# 在 PATH 后添加目录
append_path_if_exists() {
	_modify_path "${1}" "append"
}

# 在 PATH 前添加当前目录
prepend_pwd_to_path() {
	prepend_path_if_exists "$(pwd)"
}

# 在 PATH 后添加当前目录
append_pwd_to_path() {
	append_path_if_exists "$(pwd)"
}

set_proxy() {
	export http_proxy="$1"
	export https_proxy="$1"
}

set_npm_proxy() {
	export npm_config_proxy="$1"
	export npm_config_https_proxy="$1"
}

explain() {
	if [ "$#" -eq 0 ]; then
		while read -p "Command: " cmd; do
			curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
		done
		echo "Bye!"
	elif [ "$#" -eq 1 ]; then
		curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
	else
		echo "Usage"
		echo "explain                   interactive mode."
		echo "explain 'cmd -o | ...'    one quoted command to explain it."
	fi
}

# Set PATH, MANPATH, etc., for Homebrew.
if [[ "$PLATFORM" == "Darwin" ]]; then
	eval "$(/opt/homebrew/bin/brew shellenv)"
fi

export EDITOR=nvim
export PROJECTS=$HOME/projects
export DOTFILES_ROOT="$HOME/.dotfiles"

# Load proxy setting firstly.
[ -f ~/.proxyrc ] && source ~/.proxyrc

setup_paths() {
	# set PATH so it includes user's private bin if it exists
	prepend_path_if_exists "$HOME/bin"

	# Add dotfiles scripts path
	prepend_path_if_exists "$DOTFILES_ROOT/bin"

	if [[ "$PLATFORM" == "Darwin" ]]; then
		# Path for homebrew sbin
		append_path_if_exists "$(brew --prefix)/sbin"
	fi

	# Scripts in dropbox
	export DROPBOX_PATH="$HOME/cloud/Dropbox"
	prepend_path_if_exists "$DROPBOX_PATH/bin"

	# Scripts in OneDrive
	export ONEDRIVE_PATH="$HOME/cloud/OneDrive"
	prepend_path_if_exists "$ONEDRIVE_PATH/bin"

	# Go path
	append_path_if_exists "$HOME/go/bin"

	# Add depot_tools
	local DEPOT_TOOLS_HOME=$HOME/bin/depot_tools
	if [ $PLATFORM = 'Cygwin' ]; then
		append_path_if_exists "$DEPOT_TOOLS_HOME"
	else
		prepend_path_if_exists "$DEPOT_TOOLS_HOME"
	fi

	# MacOSX SDK path
	if [ $PLATFORM = 'Darwin' ]; then
		export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
	fi

	# Android SDK setup
	if [ $PLATFORM = 'Darwin' ]; then
		export ANDROID_SDK=$HOME/Library/Android/sdk
		export ANDROID_NDK=$HOME/Library/Android/sdk/ndk/current
	elif [ $PLATFORM = 'Linux' ]; then
		export ANDROID_SDK=$HOME/Android/Sdk
		export ANDROID_NDK=$HOME/Android/Sdk/ndk/current
	fi
	if [ -d "$ANDROID_SDK" ]; then
		append_path_if_exists "$ANDROID_SDK/tools"
		append_path_if_exists "$ANDROID_SDK/tools/bin"
		append_path_if_exists "$ANDROID_SDK/platform-tools"

		# Add alias for bazel
		export ANDROID_HOME=$ANDROID_SDK
	else
		unset ANDROID_SDK
		unset ANDROID_NDK
	fi
	if [ -d "$ANDROID_NDK" ]; then
		append_path_if_exists "$ANDROID_NDK"

		# Add alias for bazel
		export ANDROID_NDK_HOME=$ANDROID_NDK
	else
		unset ANDROID_NDK
	fi

	# Flutter prebuild path
	append_path_if_exists "$HOME/flutter/bin"

	# yarn path
	if [ $(command_exists yarn) ]; then
		export PATH=$PATH:"$(yarn global bin)"
	fi

	# rustup path
	# Use Tsinghua mirror site tuna.
	#export RUSTUP_UPDATE_ROOT=https://mirrors.tuna.tsinghua.edu.cn/rustup/rustup
	#export RUSTUP_DIST_SERVER=https://mirrors.tuna.tsinghua.edu.cn/rustup
	prepend_path_if_exists "$HOME/.cargo/bin"

	# emscripten settings
	local EMSCRIPTEN_SDK_ROOT="$HOME/bin/emsdk"
	[[ -d $EMSCRIPTEN_SDK_ROOT ]] && source $EMSCRIPTEN_SDK_ROOT/emsdk_env.sh >/dev/null 2>&1

	# wasmtime path
	export WASMTIME_HOME="$HOME/.wasmtime"
	prepend_path_if_exists "$WASMTIME_HOME/bin"

	# Wasmer
	export WASMER_DIR="$HOME/.wasmer"
	[[ -s "$WASMER_DIR/wasmer.sh" ]] && source "$WASMER_DIR/wasmer.sh"
}

setup_paths

# Setup LC_ALL explicitly
export LC_ALL=en_US.UTF-8

alias npm-exec='PATH=$(npm bin):$PATH'

# http://lifehacker.com/5396183/create-an-awesome-command-line-calculator
calc() { awk "BEGIN{ print $*  }"; }
