# FZF Cross-Platform Configuration
# Supports macOS (Homebrew), Linux (apt/brew), and manual installations

# Only load in interactive mode
if [[ $- != *i* ]]; then
  return 0 2>/dev/null || exit 0
fi

# Detect FZF installation paths in order of preference
FZF_PATHS=(
  "$HOME/.fzf"  # Manual installation in user home
  "/opt/homebrew/opt/fzf"  # macOS Homebrew (Apple Silicon)
  "/usr/local/opt/fzf"  # macOS Homebrew (Intel)
  "/usr/share/fzf"  # Linux apt package
  "/usr/local/share/fzf"  # Linux manual/brew
  "$HOME/.local/share/fzf"  # Linux user local
)

# Find and source FZF configuration
for fzf_path in "${FZF_PATHS[@]}"; do
  if [[ -f "$fzf_path/shell/completion.zsh" ]]; then
    # Auto-completion
    source "$fzf_path/shell/completion.zsh" 2>/dev/null

    # Key bindings
    source "$fzf_path/shell/key-bindings.zsh" 2>/dev/null

    # Set FZF_BASE for applications that need it
    export FZF_BASE="$fzf_path"
    break
  fi
done

# If no standard installation found, try to locate fzf binary and use relative paths
if [[ -z "$FZF_BASE" ]] && command -v fzf >/dev/null 2>&1; then
  fzf_bin_path=$(command -v fzf)
  fzf_dir=$(dirname "$fzf_bin_path")

  # Try to find shell files relative to binary
  if [[ -f "$fzf_dir/../share/fzf/shell/completion.zsh" ]]; then
    source "$fzf_dir/../share/fzf/shell/completion.zsh" 2>/dev/null
    source "$fzf_dir/../share/fzf/shell/key-bindings.zsh" 2>/dev/null
    export FZF_BASE="$fzf_dir/../share/fzf"
  elif [[ -f "$fzf_dir/../shell/completion.zsh" ]]; then
    source "$fzf_dir/../shell/completion.zsh" 2>/dev/null
    source "$fzf_dir/../shell/key-bindings.zsh" 2>/dev/null
    export FZF_BASE="$fzf_dir/.."
  fi
fi