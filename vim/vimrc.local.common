"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" This is my vimrc based on vundle package management.
" Feel free to use and distribute.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! GetRunningOS()
  if has("win32")
    return "win"
  endif
  if has("unix")
    if system('uname')=~'Darwin'
      return "mac"
    else
      return "linux"
    endif
  endif
endfunction
let os=GetRunningOS()

set wrap
set virtualedit=
set tabstop=2
set softtabstop=2
set shiftwidth=2
set nospell

" Unmap H and L which has been set within .vimrc
nunmap H
nunmap L
vunmap H
vunmap L
"iunmap <Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Setup for Powerline
let g:Powerline_symbols = 'unicode'

" Setup for syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_error_symbol = '✘'
"let g:syntastic_warning_symbol = "▲"
"let g:syntastic_check_on_open = 1
"let g:syntastic_sh_checkers = ['shellcheck']
"let g:syntastic_objc_checkers = ['oclint']

" Setup for ctrlp: http://kien.github.io/ctrlp.vim/
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
" global wildignore
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:15,results:15'
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

" Setup for ctrlp-funky: https://github.com/tacahiroy/ctrlp-funky
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1

" Setup for Chromium
let chromiumPath=''
if os=='mac'
  let chromiumPath=$PROJECT_ROOT . '/chromium/chromium-mac/'
elseif os=='linux'
  let chromiumPath=$PROJECT_ROOT . '/chromium/chromium-linux/'
endif
if isdirectory(chromiumPath)
  execute 'so ' . chromiumPath . 'src/tools/vim/filetypes.vim'
  execute 'so ' . chromiumPath . 'src/tools/vim/ninja-build.vim'
  execute 'so ' . chromiumPath . 'src/tools/vim/clang-format.vim'
  " Setup for YouCompleteMe on Chromium
  let g:ycm_global_ycm_extra_conf = chromiumPath . 'src/tools/vim/chromium.ycm_extra_conf.py'
endif

" Gtags setup
let Gtags_Auto_Map = 1
":map <C-]> :Gtags<CR><CR>
":map <C-\> :Gtags -r<CR><CR>
":map <F10> :cclose<CR>
":map <F11> :cp<CR>
":map <F12> :cn<CR>

set formatoptions=crqt

"tmux setting
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>

  if has("mouse")
    set mouse=a
  endif
else
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
endif
