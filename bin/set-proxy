#!/bin/bash

if [ -z $PLATFORM ]; then
    platformName=$(uname)
    PLATFORM=${platformName:0:6}
    if [ $PLATFORM = 'CYGWIN' ]; then
        PLATFORM='Cygwin'
    fi
    unset platformName
fi

urlencode() {
    # urlencode <string>
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

urldecode() {
    # urldecode <string>

    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

update_proxy_settings () {
    read -e -p "Use proxy? [y/N] " -n 1
    has_proxy=${REPLY:=n}

    if [ ${has_proxy,,} = 'n' ]; then
        echo "No need to configure proxy settings."
        return 0
    fi

    read -p "HTTP proxy host: " -r http_host
    read -p "HTTP proxy port: " -r http_port
    read -p "HTTP proxy username (if any): " -r http_user
    if [ $http_user ]; then
        read -p "HTTP proxy password (if any): " -r -s http_passwd
        echo ""
    fi
    read -p "Socks proxy host (Press Enter if same with HTTP proxy host): " -r
    socks_host=${REPLY:=$http_host}
    read -p "Socks proxy port: " -r socks_port
    read -p "No proxy domains(separated by comma. Press Enter to use default settings): " -r
    no=${REPLY:=intel.com,.intel.com,10.0.0.0/8,192.168.0.0/16,localhost,127.0.0.0/8,134.134.0.0/16}

    if [ ${http_user} ]; then
        http_credential=${http_user}
        if [ ${http_passwd} ]; then
            encoded_passwd=$(urlencode ${http_passwd})
            http_credential="${http_user}:${encoded_passwd}"
        fi
    fi
    if [ ${http_credential} ]; then
        http="http://${http_credential}@${http_host}:${http_port}/"
    else
        http="http://${http_host}:${http_port}/"
    fi
    socks="socks://${socks_host}:${socks_port}/"
    echo "HTTP proxy: ${http:-"undefined."}, Socks proxy: ${socks:-"undefined."}, No proxy: ${no}"

    proxy_file="${HOME}/.proxyrc"
    echo "Update ${proxy_file}."

    echo "#!/bin/bash" > ${proxy_file}
    echo "export http_proxy='${http}'" >> ${proxy_file}
    echo -e "export https_proxy='${http}'\nexport ftp_proxy='${http}'" >> ${proxy_file}
    echo -e "export npm_config_proxy='${http}'\nexport npm_config_https_proxy='${http}'" >> ${proxy_file}
    echo "export socks_proxy='${socks}'" >> ${proxy_file}
    echo "export no_proxy='${no}'" >> ${proxy_file}

    echo -e "\nGIT_PROXY_COMMAND=${HOME}/bin/git-proxy" >> ${proxy_file}
    echo "GIT_PROXY_IGNORE=" >> ${proxy_file}

    # Set git-proxy
    bin_dir="${HOME}/bin"
    mkdir -p ${bin_dir}
    git_proxy_file="${bin_dir}/git-proxy"
    echo "Regenerate ${git_proxy_file}."

    echo "#!/bin/bash" > ${git_proxy_file}
    echo -e "nc -X 5 -x ${socks_host}:${socks_port} $*" >> ${git_proxy_file}
    chmod +x ${git_proxy_file}

    if [ $PLATFORM = "Linux" ]; then
        apt_conf_file="/tmp/apt.conf"
        echo "Acquire::http::proxy \"${http}\";" > ${apt_conf_file}
        echo "Acquire::https::proxy \"${http}\";" >> ${apt_conf_file}
        echo "Acquire::ftp::proxy \"${http}\";" >> ${apt_conf_file}
        echo "Acquire::socks::proxy \"${socks}\";" >> ${apt_conf_file}

        echo "Replace /etc/apt/apt.conf"
        sudo cp ${apt_conf_file} /etc/apt
        rm ${apt_conf_file}
    fi
}

update_proxy_settings
