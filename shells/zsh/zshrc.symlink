# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Enable profiling (uncomment to debug startup time)
# zmodload zsh/zprof

#==============================================================================
# 基础配置 - 优化版本
#==============================================================================

# Check if Zinit is installed, install if not
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit.git "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

# Load Zinit
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load only essential Oh My Zsh components
zinit snippet OMZ::lib/completion.zsh
zinit snippet OMZ::lib/history.zsh
zinit snippet OMZ::lib/key-bindings.zsh
zinit snippet OMZ::lib/theme-and-appearance.zsh

# Essential bundles (light-weight loading)
zinit light-mode for \
    zsh-users/zsh-completions \
    zsh-users/zsh-autosuggestions \
    zsh-users/zsh-syntax-highlighting \
    paulirish/git-open

# Load Oh My Zsh plugins properly
zinit snippet OMZ::plugins/brew/brew.plugin.zsh
zinit snippet OMZ::plugins/command-not-found/command-not-found.plugin.zsh
zinit snippet OMZ::plugins/git/git.plugin.zsh

# Load powerlevel10k theme
zinit ice depth=1
zinit light romkatv/powerlevel10k

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#==============================================================================
# 工具函数配置 - 优化版本
#==============================================================================

# Lazy loading for explain function
explain() {
    if ! command -v curl >/dev/null 2>&1; then
        echo "curl is required for explain function"
        return 1
    fi
    
	if [ "$#" -eq 0 ]; then
		while read -p "Command: " cmd; do
			[ -z "$cmd" ] && break
			curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
		done
		echo "Bye!"
	elif [ "$#" -eq 1 ]; then
		curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
	else
		echo "Usage"
		echo "explain                   interactive mode."
		echo "explain 'cmd -o | ...'    one quoted command to explain it."
	fi
}

# Proxy functions
set_proxy() {
	export http_proxy="$1"
	export https_proxy="$1"
}

set_npm_proxy() {
	export npm_config_proxy="$1"
	export npm_config_https_proxy="$1"
}

#==============================================================================
# 插件和补全配置 - 优化版本
#==============================================================================

# Optimized file loading - only load essential files
setopt null_glob

# Cache file list to avoid repeated globbing
local zsh_cache_file="${XDG_CACHE_HOME:-$HOME/.cache}/zsh_file_cache.zsh"
local cache_valid=false

if [[ -f "$zsh_cache_file" && -n "$zsh_cache_file"(#qN.mh-24) ]]; then
    # Cache is less than 24 hours old
    source "$zsh_cache_file"
    cache_valid=true
else
    # Rebuild cache
    mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache}"
    
    local shells_zsh=($DOTFILES_ROOT/shells/zsh/**/*.zsh(N))
    local platform_zsh=()
    
    case $PLATFORM in
        Darwin) platform_zsh=($DOTFILES_ROOT/platforms/mac/**/*.zsh(N)) ;;
        Linux) platform_zsh=($DOTFILES_ROOT/platforms/linux/**/*.zsh(N)) ;;
        Cygwin) platform_zsh=($DOTFILES_ROOT/platforms/win/**/*.zsh(N)) ;;
    esac
    
    typeset -U config_files
    config_files=(${shells_zsh[@]} ${platform_zsh[@]})
    
    # Generate cache file
    print "# Zsh configuration cache - generated on $(date)" > "$zsh_cache_file"
    for file in ${config_files:#*/path.zsh}; do
        print "source $file" >> "$zsh_cache_file"
    done
    
    source "$zsh_cache_file"
fi

unsetopt null_glob

#==============================================================================
# FZF 配置 - 优化版本
#==============================================================================

# Only load FZF if installed and in interactive mode
if [[ $- == *i* ]] && [[ -f ~/.fzf.zsh ]]; then
    source ~/.fzf.zsh
    
    FD_OPTIONS="--hidden --follow --exclude .git --exclude node_modules"
    export FZF_DEFAULT_OPTS="--no-mouse --height 50% -1 --reverse --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -300' --preview-window='right:hidden:wrap' --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+} | pbcopy),ctrl-x:execute(rm -i {+})+abort'"
    export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard || fd --type f --type l $FD_OPTIONS"
    export FZF_CTRL_T_COMMAND="fd $FD_OPTIONS"
    export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"
fi

# FZF completion functions - only define if FZF is available
if command -v fzf >/dev/null 2>&1; then
    _fzf_compgen_path() {
        command fd --hidden --follow --exclude .git --exclude node_modules . "$1"
    }

    _fzf_compgen_dir() {
        command fd --type d --hidden --follow --exclude .git --exclude node_modules . "$1"
    }
fi

#==============================================================================
# 开发环境配置 - 优化版本 (lazy loading)
#==============================================================================

# Lazy loading functions for heavy tools
lazy_load() {
    local cmd=$1
    local init_cmd=$2
    eval "function $cmd {
        unset -f $cmd
        eval '$init_cmd'
        $cmd \"\$@\"
    }"
}

# iTerm2 integration - only load if in iTerm
terminal_app=$(ps -o comm= -p "$(ps -o ppid= -p "$$")" 2>/dev/null)
if [[ "$terminal_app" == *iTerm* ]] && [[ -e "${HOME}/.iterm2_shell_integration.zsh" ]]; then
    source "${HOME}/.iterm2_shell_integration.zsh"
fi

# Lazy load autojump if available
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && lazy_load autojump ". $(brew --prefix)/etc/profile.d/autojump.sh"

# Lazy load jenv
if command -v jenv >/dev/null 2>&1; then
    lazy_load jenv 'eval "$(jenv init -)"'
fi

# Lazy load rbenv
if [[ -d "$HOME/.rbenv" ]] || command -v rbenv >/dev/null 2>&1; then
    lazy_load rbenv 'eval "$(rbenv init - zsh)"'
fi

# Lazy load direnv
if command -v direnv >/dev/null 2>&1; then
    lazy_load direnv 'eval "$(direnv hook zsh)"'
fi

#==============================================================================
# 其他配置加载 - 优化版本
#==============================================================================

# Load local configs only if they exist and are readable
[[ -r ~/.local.zshrc ]] && source ~/.local.zshrc
[[ -r ~/.localrc ]] && source ~/.localrc
[[ -r ~/.local/bin/env ]] && . "$HOME/.local/bin/env"

# SDKMAN - load only if directory exists
if [[ -d "$HOME/.sdkman" ]]; then
    export SDKMAN_DIR="$HOME/.sdkman"
    [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
fi

# LM Studio
export PATH="$PATH:/Users/jondong/.lmstudio/bin"

# HarmonyOS configuration
export RNOH_C_API_ARCH="1"

# Optional: Print profiling results
# zprof
