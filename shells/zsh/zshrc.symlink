#==============================================================================
# 基础配置
#==============================================================================
# 平台特定的 Antigen 配置
if [ $PLATFORM = "Darwin" ]; then
  source $(brew --prefix)/share/antigen/antigen.zsh
fi

# Powerlevel10k 即时提示配置
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# p10k 主题配置
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#==============================================================================
# 环境变量配置
#==============================================================================
export ZSH="$HOME/.oh-my-zsh"
export HISTIGNORE='pwd:exit:fg:bg:top:clear:history:ls:uptime:df:ll:la:gst'
export HISTCONTROL=ignoredups
export HISTSIZE=10000

#==============================================================================
# 插件和补全配置
#==============================================================================
# 加载 zsh 文件
shells_zsh=($DOTFILES_ROOT/shells/zsh/**/*.zsh)
platform_zsh=''

# 平台特定配置
if [ $PLATFORM = "Darwin" ]; then
  platform_zsh=($DOTFILES_ROOT/platforms/mac/**/*.zsh)
  if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
  fi
elif [ $PLATFORM = "Linux" ]; then
  platform_zsh=($DOTFILES_ROOT/platforms/linux/**/*.zsh)
elif [ $PLATFORM = "Cygwin" ]; then
  platform_zsh=($DOTFILES_ROOT/platforms/win/**/*.zsh)
fi

# 初始化自动补全
autoload -Uz compinit
compinit

#==============================================================================
# 配置文件加载
#==============================================================================
typeset -U config_files
config_files=(${shells_zsh[@]} ${platform_zsh[@]})

# 按顺序加载配置文件
for file in ${(M)config_files:#*/path.zsh}; do source $file; done
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do source $file; done
for file in ${(M)config_files:#*/completion.zsh}; do source $file; done

unset config_files

#==============================================================================
# FZF 配置
#==============================================================================
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

FD_OPTIONS="--hidden --follow --exclude .git --exclude node_modules"
export FZF_DEFAULT_OPTS="--no-mouse --height 50% -1 --reverse --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -300' --preview-window='right:hidden:wrap' --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+} | pbcopy),ctrl-x:execute(rm -i {+})+abort'"
export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard || fd --type f --type l $FD_OPTIONS"
export FZF_CTRL_T_COMMAND="fd $FD_OPTIONS"
export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"

# FZF 补全函数
_fzf_compgen_path() {
  command fd --hidden --follow --exclude .git --exclude node_modules . "$1"
}

_fzf_compgen_dir() {
  command fd --type d --hidden --follow --exclude .git --exclude node_modules . "$1"
}

#==============================================================================
# 开发环境配置
#==============================================================================
# pyenv 配置
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

# nvm 配置
export NVM_DIR="$HOME/.nvm"
if [[ "$PLATFORM" == 'Darwin' ]]; then
  [ -s "$(brew --prefix)/opt/nvm/nvm.sh" ] && \. "$(brew --prefix)/opt/nvm/nvm.sh"
  [ -s "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$(brew --prefix)/opt/nvm/etc/bash_completion.d/nvm"
elif [[ "$PLATFORM" == 'Linux' ]]; then
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
fi

# pnpm 配置
export PNPM_HOME="$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# RVM
export PATH="$PATH:$HOME/.rvm/bin"
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

# iTerm2 集成
[[ -e "${HOME}/.iterm2_shell_integration.zsh" ]] && source "${HOME}/.iterm2_shell_integration.zsh"

# Emacs 风格按键绑定（用于 tmux-yank 插件）
bindkey -e

#==============================================================================
# PATH 配置
#==============================================================================
export PATH="$HOME/.local/bin:$PATH"

# autojump configuration.
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh

# z configuration
. $(brew --prefix)/etc/profile.d/z.sh

#==============================================================================
# 其他配置加载
#==============================================================================
# 加载本地配置
[ -f ~/.local.zshrc ] && source ~/.local.zshrc
[ -f ~/.localrc ] && source ~/.localrc
