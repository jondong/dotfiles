#==============================================================================
# 基础配置
#==============================================================================
# 平台特定的 Antigen 配置
if [ $PLATFORM = "Darwin" ]; then
  source $(brew --prefix)/share/antigen/antigen.zsh
  # Load the oh-my-zsh's library.
  antigen use oh-my-zsh

  # Bundles from the default repo (robbyrussell's oh-my-zsh).
  antigen bundle git
  antigen bundle pip
  antigen bundle command-not-found

  # Syntax highlighting bundle.
  antigen bundle zsh-users/zsh-autosuggestions
  antigen bundle zsh-users/zsh-syntax-highlighting
  antigen bundle paulirish/git-open

  # Load the theme.
  antigen theme romkatv/powerlevel10k
  POWERLEVEL9K_MODE="awesome-patched"

  # Tell antigen that you're done.
  antigen apply
fi

# Powerlevel10k 即时提示配置
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# p10k 主题配置
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#==============================================================================
# 工具函数配置
#==============================================================================
# current shell
current_shell() {
	ps -p "$$" -ocomm=
}

# 检查命令是否存在
command_exists() {
	command -v "$1" >/dev/null 2>&1
}

# 检查目录是否已在 PATH 中
directory_already_in_path() {
	local dir="${1}"
	[[ ":${PATH}:" == *":${dir}:"* ]]
}

explain() {
	if [ "$#" -eq 0 ]; then
		while read -p "Command: " cmd; do
			curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
		done
		echo "Bye!"
	elif [ "$#" -eq 1 ]; then
		curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
	else
		echo "Usage"
		echo "explain                   interactive mode."
		echo "explain 'cmd -o | ...'    one quoted command to explain it."
	fi
}

# http://lifehacker.com/5396183/create-an-awesome-command-line-calculator
calc() { awk "BEGIN{ print $*  }"; }

set_proxy() {
	export http_proxy="$1"
	export https_proxy="$1"
}

set_npm_proxy() {
	export npm_config_proxy="$1"
	export npm_config_https_proxy="$1"
}

#==============================================================================
# 插件和补全配置
#==============================================================================
# 加载 zsh 文件
setopt null_glob
shells_zsh=($DOTFILES_ROOT/shells/zsh/**/*.zsh)

# 平台特定配置
platform_zsh=''
if [ $PLATFORM = "Darwin" ]; then
  platform_zsh=($DOTFILES_ROOT/platforms/mac/**/*.zsh)
elif [ $PLATFORM = "Linux" ]; then
  platform_zsh=($DOTFILES_ROOT/platforms/linux/**/*.zsh)
elif [ $PLATFORM = "Cygwin" ]; then
  platform_zsh=($DOTFILES_ROOT/platforms/win/**/*.zsh)
fi

typeset -U config_files
config_files=(${shells_zsh[@]} ${platform_zsh[@]})

# 按顺序加载配置文件
for file in ${config_files:#*/path.zsh}; do source $file; done

unset config_files
unsetopt null_glob

#==============================================================================
# FZF 配置
#==============================================================================
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

FD_OPTIONS="--hidden --follow --exclude .git --exclude node_modules"
export FZF_DEFAULT_OPTS="--no-mouse --height 50% -1 --reverse --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -300' --preview-window='right:hidden:wrap' --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-a:select-all+accept,ctrl-y:execute-silent(echo {+} | pbcopy),ctrl-x:execute(rm -i {+})+abort'"
export FZF_DEFAULT_COMMAND="git ls-files --cached --others --exclude-standard || fd --type f --type l $FD_OPTIONS"
export FZF_CTRL_T_COMMAND="fd $FD_OPTIONS"
export FZF_ALT_C_COMMAND="fd --type d $FD_OPTIONS"

# FZF 补全函数
_fzf_compgen_path() {
  command fd --hidden --follow --exclude .git --exclude node_modules . "$1"
}

_fzf_compgen_dir() {
  command fd --type d --hidden --follow --exclude .git --exclude node_modules . "$1"
}

#==============================================================================
# 开发环境配置
#==============================================================================
# iTerm2 集成
[[ -e "${HOME}/.iterm2_shell_integration.zsh" ]] && source "${HOME}/.iterm2_shell_integration.zsh"

#==============================================================================
# 工具配置
#==============================================================================
# autojump configuration.
[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh

# z configuration
. $(brew --prefix)/etc/profile.d/z.sh

#==============================================================================
# 其他配置加载
#==============================================================================
# 加载本地配置
[ -f ~/.local.zshrc ] && source ~/.local.zshrc
[ -f ~/.localrc ] && source ~/.localrc
